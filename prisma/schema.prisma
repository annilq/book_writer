generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  books         Book[]          @relation("BookAuthors")
  tags          Tag[]           @relation("UserTags")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// business
enum BookStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
  UNPUBLISHED
  PENDINGREVIEW
}

// step
enum STEP {
  INIT
  OUTLINE
  CHAPTER
  COMPLETE
}

model Book {
  id               String     @id @default(nanoid(16))
  title            String
  model            String
  description      String
  prompt           String
  publicationDate  DateTime?
  isbn             String?    @unique
  coverImage       String?
  language         String
  currentChapterId Int?
  chapters         Chapter[]
  messages         Message[]
  authors          User[]     @relation("BookAuthors")
  tags             Tag[]      @relation("BookTags")
  reviews          Review[]
  publisherId      Int?
  publisher        Publisher? @relation(fields: [publisherId], references: [id])
  categories       Category[] @relation("BookCategories")
  status           BookStatus @default(DRAFT)
  step             STEP       @default(INIT)
  isPublic         Boolean    @default(false)
  createdAt        DateTime   @default(now())
}

model Chapter {
  id          Int       @id @default(autoincrement())
  title       String
  content     String?
  description String
  leaf        Boolean   @default(true)
  position    String    @default("0") // Path enumeration field (e.g., "1", "1.1", "1.1.1")
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id])
  messages    Message[]

  @@index([position])
}

model Message {
  id        String        @id @default(nanoid(16))
  role      String
  content   String
  bookId    String?
  model     String?
  chapterId Int?
  book      Book?         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  chapter   Chapter?      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  parts     MessagePart[]
  position  Int
  createdAt DateTime      @default(now())

  @@index([bookId])
}

enum PartType {
  text
  tool_invocation
  reasoning
}

model MessagePart {
  id        String   @id @default(nanoid(16))
  type      PartType
  text      String
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
}

model Tag {
  id        Int     @id @default(autoincrement())
  name      String
  creatorId String?
  creator   User?   @relation("UserTags", fields: [creatorId], references: [id])
  books     Book[]  @relation("BookTags")
}

model Review {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String
  bookId  String
  book    Book   @relation(fields: [bookId], references: [id])
}

model Publisher {
  id      Int    @id @default(autoincrement())
  name    String
  address String
  books   Book[]
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  books       Book[]  @relation("BookCategories")
}
